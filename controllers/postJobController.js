let DeveloperModel = require('../models/developerSchema');

const validator = require("validator");

const ValidateInput = require("../util/Utility");

const crypto = require("crypto");

var path = require('path');


var PostJob = function PostJob(type, request, file, response) {

    // console.log(request)

    const {

        POSTEDBY,
        JOBTITLE,
        JOBROLES,
        JOBIMAGE,
        JOBSALARYSTARTRANGE,
        JOBSALARYENDRANGE

    } = request;

    if (ValidateInput.ValidateInput({

            POSTEDBY,
            JOBTITLE,
            JOBROLES,
            JOBIMAGE,
            JOBSALARYSTARTRANGE,
            JOBSALARYENDRANGE

        }, request)) {

        if (validator.isEmail(POSTEDBY)) { //validate getEmail()

            // console.log(Request.file.filename);

            const salt = crypto.randomBytes(16).toString('hex');

            const JobUrl = crypto.pbkdf2Sync(JOBTITLE, salt, 1000, 6, "sha512").toString(`hex`);

            request.JOBURL = JOBTITLE.replace(/[^a-zA-Z0-9]/g, '-') + "-" + JobUrl;

            // Generate a unique link for the image
            // Link generated by nodeJs already
            request.JOBIMAGE = "localhost:5000/JobFiles/" + file.filename;

            let PostJob = new DeveloperModel(request);

            PostJob.save()

            .then(() => {
                response.status(200).send({
                    type: type,
                    route: "/job/newpost",
                    request: request,
                    message: "Job Post Successful",
                    data: {
                        database: "mongoDB",
                        architecture: "mongoose"
                    }
                })
            })

            .catch(() => {
                response.status(400).send({
                    type: type,
                    route: "/job/newpost",
                    request: request,
                    message: "Job Post Failed",
                    data: {
                        database: "mongoDB",
                        architecture: "mongoose"
                    }
                })
            })
        } else {
            response.status(401).send({
                type: type,
                route: "/job/newpost",
                request: request,
                message: "Invalid Email",
                data: {
                    database: "mongoDB",
                    architecture: "mongoose"
                }
            })
        }
    } else {
        response.status(401).send({
            type: type,
            route: "/job/newpost",
            request: request,
            message: "Invalid Payload",
            data: {
                database: "mongoDB",
                architecture: "mongoose"
            }
        })

    }

}

module.exports.PostJob = PostJob;
let PostBlogModel = require('../models/blogSchema');

const validator = require("validator");

const ValidateInput = require("../util/Utility");

const crypto = require("crypto");

var path = require('path');

const verifyToken = require("../util/verifyToken");

const PostBlog = (type, request, response) => {

    Request = request;

    request = request.body;



    const {

        POSTEDBY,

        BLOGTITLE,

        BLOGPOST,

        BLOGIMAGE

    } = request;

    let vT = verifyToken.verifyToken(POSTEDBY);

    if (vT === "Error") {

        response.status(404).send({

            type: type,

            route: "/blog/newpost",

            request: request,

            message: "Sorry, an error occurred!",

            data: {

                database: "mongoDB",

                architecture: "mongoose"

            }

        })

    } else if (vT === "Expired!") {

        response.status(402).send({

            type: type,

            route: "/blog/newpost",

            request: request,

            message: "Ops, Your session has expired! You may need to sign in again.",

            data: {

                database: "mongoDB",

                architecture: "mongoose"

            }

        })

    } else {

        if (ValidateInput.ValidateInput({

                POSTEDBY,

                BLOGTITLE,

                BLOGPOST,

                BLOGIMAGE


            }, request)) {

            if (validator.isEmail(vT)) { //validate getEmail()

                request.POSTEDBY = vT;

                // console.log(Request.file.filename);

                const salt = crypto.randomBytes(16).toString('hex');

                const blogUrl = crypto.pbkdf2Sync(BLOGTITLE, salt, 1000, 6, "sha512").toString(`hex`);

                request.BLOGURL = BLOGTITLE.replace(/[^a-zA-Z0-9]/g, '-') + "-" + blogUrl;

                // Generate a unique link for the image
                // Link generated by nodeJs already
                request.BLOGIMAGE = "localhost:5000/BlogFiles/" + Request.file.filename;

                let PostBlog = new PostBlogModel(request);

                PostBlog.save()

                .then(() => {

                    response.status(200).send({

                        type: type,

                        route: "/blog/newpost",

                        request: request,

                        message: "Great! You've just added a new blog post.",

                        data: {

                            database: "mongoDB",

                            architecture: "mongoose"

                        }

                    })

                })

                .catch(() => {

                    response.status(400).send({

                        type: type,

                        route: "/blog/newpost",

                        request: request,

                        message: "Sorry, an error occurred!",

                        data: {

                            database: "mongoDB",

                            architecture: "mongoose"

                        }
                    })
                })

            } else {

                response.status(401).send({

                    type: type,

                    route: "/blog/newpost",

                    request: request,

                    message: "Sorry, you're not authorized for this!",

                    data: {

                        database: "mongoDB",

                        architecture: "mongoose"

                    }

                })

            }

        } else {

            response.status(401).send({

                type: type,

                route: "/blog/newpost",

                request: request,

                message: "Ops, seems all the fields are not well filled!",

                data: {

                    database: "mongoDB",

                    architecture: "mongoose"

                }

            })


        }

    }

}

module.exports.PostBlog = PostBlog;